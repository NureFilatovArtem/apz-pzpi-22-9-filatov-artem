МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 

ЗВІТ
з лабораторної роботи №4
з дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ» 
 



 
Виконав:                                       	    	   Перевірив:
ст. гр. ПЗПІ-22-9                                    	   викладач.каф.ПІ
Філатов Артем Дмитрович                    	   Дашенков Дмитро Сергійович 
 
 
  
Харків 2025
4.1 Мета завдання:
Метою цієї лабораторної роботи є створення фронтенд частини програмної системи контролю параметрів у офісних приміщеннях. Web-застосунок повинен забезпечити зручну роботу звичайних користувачів (перегляд показників, сповіщення, інтерфейс мовами UA/EN) та адміністраторів (керування користувачами та пристроями, експорт/імпорт даних, бекапи). Система повинна підтримувати інтернаціоналізацію, локалізацію та інтегруватися з бекендом та базою даних.

4.2 Хід роботи:

В ході роботи було розроблено повноцінний full-stack веб-застосунок, використовуючи сучасний технологічний стек: React (з використанням бібліотеки Material-UI для інтерфейсу) для фронтенд-частини та Node.js (з фреймворком Express.js та ORM Sequelize) для бекенд-частини.

Розроблено структуру компонентів web-застосунку на основі архітектури “розділення за ролями”. Було створено окремі захищені маршрути (/admin/* та /user/*) та спеціалізовані компоненти-лейаути (AdminLayout, UserLayout) з власними боковими панелями навігації (AdminSidebar, UserSidebar). Доступ до цих маршрутів контролюється компонентом ProtectedRoute, який перевіряє роль користувача.
Реалізовано двомовний інтерфейс. Налаштовано базову інфраструктуру для інтернаціоналізації за допомогою бібліотеки i18next. У проекті наявні файли для локалізації (src/locales/en, src/locales/uk), що дозволяє динамічно перекладати елементи інтерфейсу, такі як заголовки, кнопки та мітки полів, використовуючи хук useTranslation.
Забезпечено аутентифікацію користувачів та перевірку ролей. Реалізовано механізм аутентифікації на основі JWT (JSON Web Tokens). Після успішного логіну користувач отримує Bearer Token, який зберігається локально та автоматично прикріплюється до кожного API-запиту за допомогою axios interceptor. На бекенді реалізовано middleware (authenticateToken та isAdmin), які перевіряють валідність токена та права доступу до захищених ресурсів.
Створено повнофункціональний інтерфейс адміністратора, який включає:
Перегляд та керування користувачами: Сторінка UserManagementPage надає повний CRUD-функціонал для роботи з користувачами (створення, перегляд списку, редагування та видалення).
Динамічне управління даними системи: Створено інноваційну сторінку DataManagementPage, яка дозволяє адміністратору в рамках єдиного інтерфейсу переглядати дані з різних таблиць бази даних (buildings, sensors, offices, measurements, subscriptions), фільтрувати їх за допомогою динамічного пошуку та додавати нові записи через універсальне модальне вікно.
Зауваження: Функціонал експорту/імпорту та створення резервних копій не було реалізовано в рамках цієї ітерації, проте архітектура дозволяє його легко додати у майбутньому.

Розроблено інтерфейс для звичайного користувача, який включає персональний дашборд (UserDashboardPage) та сторінку для перегляду даних (UserDataViewPage) з можливістю їх фільтрації за будівлями та сенсорами за допомогою випадаючих списків.

Побудовано відповідні UML-діаграми, що моделюють архітектуру та логіку роботи веб-застосунку, які наведено у наступних розділах.


4.3. UML діаграма прецедентів (Use Case Diagram)
Діаграма прецедентів показує основні дії, які можуть виконувати користувачі системи залежно від ролі (звичайний користувач або адміністратор). Вона демонструє, як відбувається взаємодія з web-застосунком: перегляд даних, отримання сповіщень, керування пристроями, експорт/імпорт тощо.


Рисунок Б.1 - UML-діаграма прецедентів



4.4. UML діаграмa компонентів (Component Diagram).
Ця діаграма відображає логічну структуру системи на рівні модулів: інтерфейс користувача, інтерфейс адміністратора, модуль локалізації, взаємодію з бекендом через API, а також підключення до бази даних. Вона дозволяє зрозуміти, як саме побудована система і які частини її відповідальні за окремі функції.






















Рисунок Б.2 - UML-діаграма компонентів









4.5. UML Activity Diagram — Діаграма діяльності
Діаграма діяльності моделює логіку роботи інтерфейсу користувача під час зміни мови. Вона демонструє послідовність дій, які відбуваються при запуску сайту: визначення мови, завантаження відповідних ресурсів та відображення перекладеного інтерфейсу. Це важливо для підтримки інтернаціоналізації застосунку.




Рисунок Б.3 - UML Activity Diagram



4.6. UML State Diagram — Діаграма станів
Діаграма станів описує поведінку інтерфейсу адміністратора в динаміці: вхід у систему, навігація між різними модулями адміністрування (користувачі, сенсори, резервні копії), повернення до головного меню. Така діаграма дозволяє зрозуміти, як змінюється стан інтерфейсу залежно від дій адміністратора.

			Рисунок Б.4 - UML-діаграма (State Diagram)



4.7. Висновок:
В результаті лабораторної роботи було реалізовано повноцінну фронтенд-частину інформаційної системи з розподілом доступу за ролями. Розроблено архітектуру, що чітко розділяє функціонал адміністратора та звичайного користувача, забезпечуючи кожного окремим, захищеним інтерфейсом. Застосунок успішно інтегрується з API бекенду за допомогою JWT-аутентифікації для всіх захищених операцій, включаючи повний CRUD-функціонал для адміністратора. Було реалізовано динамічні та інтерактивні інтерфейси з використанням Material-UI, а також закладено основу для повної інтернаціоналізації додатку. Цілі лабораторної роботи було досягнуто в повному обсязі.

Весь код програмного застосунку був завантажений на GitHub за посиланням:
https://github.com/NureFilatovArtem/apz-pzpi-22-9-filatov-artem/tree/main/Lab4

Посилання на відео демонстрацію

https://youtu.be/ahScCau7Kms
4.8. Контрольні завдання
1. Опишіть програмну архітектуру веб частини програмної системи.
Програмна архітектура веб-частини побудована за компонентно-орієнтованим підходом з використанням шаблону багатошарової архітектури (Layered Architecture). Система логічно розділена на декілька шарів:
Шар представлення (Presentation Layer): Реалізований за допомогою React-компонентів та бібліотеки Material-UI. Відповідає за відображення інтерфейсу користувача та взаємодію з ним. Компоненти організовані за принципом розділення на "розумні" (контейнери/сторінки) та "дурні" (презентаційні).
Шар бізнес-логіки (Business Logic Layer): Частково реалізований на фронтенді в React-компонентах, які керують станом (state), та в хуках AuthContext для управління автентифікацією. Основна бізнес-логіка, пов'язана з обробкою даних, знаходиться на бекенді.
Шар доступу до даних (Data Access Layer): На фронтенді представлений "сервісним" шаром (файли в папці services, напр. dataService.js), який інкапсулює логіку API-запитів до бекенду за допомогою axios.
Маршрутизація (Routing): Використовується централізований роутер (AppRouter.js), який керує навігацією та доступом до сторінок на основі ролі користувача, застосовуючи ProtectedRoute для захисту маршрутів.
2. Опишіть програмні технології та компоненти, які використовуються в веб частині програмної системи.
Основний фреймворк: React.js (v18+) для побудови динамічного односторінкового застосунку (SPA).
Бібліотека компонентів: Material-UI (MUI) для створення адаптивного, сучасного та консистентного дизайну.
Маршрутизація: React Router DOM (v6) для навігації між сторінками на стороні клієнта.
Управління станом: React Context API (AuthContext) для глобального управління станом автентифікації користувача. Локальний стан компонентів управляється хуками useState та useEffect.
HTTP-клієнт: Axios для виконання асинхронних API-запитів до бекенду, з використанням перехоплювачів (interceptors) для автоматичного додавання JWT-токена в заголовки.
Інтернаціоналізація: i18next та react-i18next для реалізації багатомовного інтерфейсу.
Інструменти збірки: Webpack та Babel (зазвичай включені в Create React App або аналогічні інструменти).
Мова: JavaScript (ES6+).
3. Опишіть доступну у веб частині системи бізнес логіку програмної системи.
Аутентифікація та Авторизація: Логіка входу, виходу, зберігання сесії користувача (токену) та перевірка ролей (admin, user) для надання доступу до відповідних сторінок та функцій.
CRUD-операції для адміністратора: Інтерфейс адміністратора (DataManagementPage, UserManagementPage) дозволяє створювати, читати, оновлювати та видаляти (CRUD) записи для всіх основних сутностей системи: користувачів, будівель, офісів, сенсорів.
Фільтрація та Пошук: Реалізовано логіку динамічного пошуку та фільтрації даних в таблицях на сторінці адміністрування. Для користувача реалізовано фільтрацію даних за будівлями та сенсорами через випадаючі списки.
Динамічне відображення даних: Логіка, що дозволяє користувачу та адміністратору обирати, які саме дані (з яких таблиць) відображати на екрані.
4. Опишіть захист даних у веб частині програмної системи.
Автентифікація за JWT: Доступ до системи можливий тільки для автентифікованих користувачів. При логіні сервер видає короткотривалий (48 годин) JWT-токен, який зберігається в localStorage браузера.
Передача токену: При кожному запиті до захищених ресурсів API, axios interceptor автоматично додає цей токен до заголовка Authorization у форматі Bearer <token>. Це запобігає прямому доступу до API без автентифікації.
Розмежування доступу на основі ролей (RBAC): На фронтенді використовується компонент-обгортка ProtectedRoute, який перевіряє роль користувача, збережену в AuthContext, та дозволяє доступ до певних маршрутів (наприклад, /admin/*) тільки користувачам з роллю "admin". Це запобігає рендерингу адміністративних сторінок для звичайних користувачів.
Захист від CSRF: Використання JWT в заголовках Authorization, а не в cookies, надає базовий захист від CSRF-атак.
Використання HTTPS: Хоча в розробці використовується HTTP, для продуктового середовища передбачається розгортання на сервері з HTTPS для шифрування трафіку між клієнтом та сервером.
5. Опишіть взаємодію веб частини програмної системи з іншими компонентами програмної системи.
Взаємодія з Backend API (Node.js/Express): Веб-частина є повністю відокремленим клієнтом, що взаємодіє з бекендом виключно через REST API. Всі операції з даними (отримання, створення, оновлення, видалення) виконуються через асинхронні HTTP-запити (GET, POST, PUT, DELETE), які відправляє axios. Дані передаються у форматі JSON.
Взаємодія з базою даних (PostgreSQL): Веб-частина не взаємодіє з базою даних напряму. Всі запити до БД інкапсульовані на бекенді, який використовує ORM Sequelize для роботи з PostgreSQL. Фронтенд отримує вже оброблені та відформатовані дані від API.
6. Опишіть підтримку інтернаціоналізації у веб частині програмної системи.
Інтернаціоналізація реалізована за допомогою бібліотеки i18next та її обгортки для React — react-i18next.
Конфігурація: Створено центральний файл конфігурації src/config/i18n.js, де визначаються підтримувані мови, шляхи до файлів перекладів та мова за замовчуванням.
Ресурси: Для кожної мови створено окремі JSON-файли (напр., src/locales/en/translation.json, src/locales/uk/translation.json), які містять пари "ключ-значення" для всіх текстових елементів інтерфейсу.
Використання в компонентах: В компонентах використовується хук useTranslation, який надає функцію t('key') для отримання перекладу за ключем та об'єкт i18n для програмної зміни мови.
7. Опишіть реалізовані у веб частині програмної системи варіанти локалізації.
У системі реалізовано підтримку двох локалізацій:
Англійська (en-US): Вважається основною мовою за замовчуванням.
Українська (uk-UA): Повноцінна локалізація, що включає переклад всіх елементів інтерфейсу.
Хоча формат дати та часу поки що використовує стандартний метод .toLocaleString(), архітектура i18next дозволяє легко інтегрувати бібліотеки типу date-fns чи moment.js для глибокої локалізації форматів дати, часу та чисел відповідно до стандартів кожної мови.
8. Опишіть реалізовану у веб частині програмної системи функціональність для налаштування та адміністрування програмної системи.
Управління користувачами: Повноцінний CRUD-інтерфейс, який дозволяє адміністратору переглядати список всіх користувачів, створювати нових, призначати їм ролі ('admin' або 'user'), редагувати їх дані та видаляти.
Управління даними системи: Реалізовано універсальну сторінку DataManagementPage, яка дозволяє переглядати та керувати всіма основними сутностями: будівлями, офісами, сенсорами та підписками. Адміністратор може створювати нові записи для більшості цих сутностей через динамічно генеровані модальні форми.

4.9. Контрольні запитання
За якою програмною архітектурою побудована веб частина програмної системи?
Веб-частина побудована за компонентно-орієнтованою архітектурою, яка відповідає шаблону багатошарової архітектури (Presentation Layer, Business Logic Layer, Data Access Layer).

9. Які програмні технології та компоненти використовуються в веб частині програмної системи?

React.js, React Router DOM, Material-UI, Axios, i18next, JavaScript (ES6+), React Context API, хуки useState, useEffect, useMemo, useCallback.

10. Яка бізнес логіка програмної системи доступна у веб частині системи?


Логіка аутентифікації та авторизації, CRUD-операції для адміністратора над сутностями (користувачі, будівлі, сенсори тощо), а також логіка фільтрації та пошуку даних для користувачів та адміністраторів.
Які актори та які варіанти використання представлені на діаграмі використання (прецедентів) веб частини програмної системи?
Актори: "Звичайний Користувач" та "Адміністратор" (який успадковує права звичайного користувача).
Варіанти використання:
Для користувача: Автентифікація, перегляд та фільтрація даних, зміна мови.
Для адміністратора: Всі варіанти використання користувача, плюс керування користувачами, будівлями, офісами, сенсорами та перегляд всіх системних даних.

11. Як у веб частині програмної системи здійснюється захист персональних даних?
Захист здійснюється шляхом:
Аутентифікації за допомогою JWT.
Авторизації через перевірку ролей на фронтенді (ProtectedRoute) та бекенді (middleware).
Передачі даних між клієнтом та сервером з перспективою використання HTTPS.
Інкапсуляції прямого доступу до бази даних (вся взаємодія йде через захищене API).

12. Як веб частина програмної системи взаємодіє з іншими компонентами програмної системи?
Вона взаємодіє виключно з Backend API через асинхронні HTTP-запити у форматі JSON. Вона не має прямого доступу до бази даних або інших сервісів.
13. Як у веб частині програмної системи забезпечується інтернаціоналізація?
За допомогою бібліотеки i18next та react-i18next, які дозволяють завантажувати мовні ресурси (JSON-файли) та динамічно змінювати мову інтерфейсу за допомогою хука useTranslation.

14. Які варіанти локалізації реалізовані у веб частині програмної системи?
Реалізовано дві локалізації: англійська (en) та українська (uk).

15. Яка функціональність для налаштування та адміністрування програмної системи реалізована у веб частині програмної системи?

Реалізовано повний CRUD-функціонал для керування користувачами, а також створення та перегляд записів для сутностей: будівлі, офіси, сенсори. Інтерфейс адміністратора надає централізовану сторінку для керування цими даними.







