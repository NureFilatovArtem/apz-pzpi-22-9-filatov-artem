МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ






ЗВІТ
з практичної роботи
з дисципліни «Архітектура програмного забезпечення»
на тему: «Template Method»





Виконав:					        	Перевірив:
ст. гр. ПЗПІ-22-9                                        	Сокорчук Ігор Петрович
Філатов Артем Дмитрович





Харків 2025
1 ІСТОРІЯ ЗМІН

№
Дата
Версія звіту
Опис змін та виправлень
1
 25.04.2025
0.1
Створено розділи: «Завдання», «Опис виконаної роботи», «Висновки»; Додаток А, Додаток Б, Додаток В та зроблено презентацію і відеозапис.



2 ЗАВДАННЯ

Ознайомитись з історією створення патерну Template Method.
Дослідити архітектурні принципи його функціонування. 
Виявити ключові компоненти патерну Template Method. 
Проаналізувати застосування патерну в різних мовах програмування. 
Навести приклади коду та схеми структури патерну.

3 ОПИС ВИКОНАНОЇ РОБОТИ

Template Method (Шаблонний метод) є одним з основних поведінкових патернів проектування, який визначає структуру алгоритму в базовому класі, залишаючи підкласам можливість перевизначити окремі кроки алгоритму, не змінюючи його загальної структури. Цей патерн був вперше описаний у класичній книзі "Design Patterns: Elements of Reusable Object-Oriented Software" авторства "Банди чотирьох" у 1994 році.
Основна ідея патерну Template Method полягає в тому, щоб винести загальну структуру алгоритму в батьківський клас, визначивши послідовність викликів методів, а конкретну реалізацію окремих кроків залишити для підкласів. Це дозволяє уникнути дублювання коду і забезпечити контрольовану точку розширення функціональності.
Структура патерну складається з кількох ключових компонентів. Абстрактний клас містить шаблонний метод, який визначає скелет алгоритму. Цей метод викликає ряд операцій у певному порядку, деякі з яких можуть бути абстрактними і мають бути реалізовані в підкласах. Конкретні підкласи реалізують абстрактні операції відповідно до своїх специфічних потреб, але не можуть змінити структуру алгоритму, визначену в шаблонному методі.
Патерн Template Method широко застосовується в бібліотеках та фреймворках, де потрібно забезпечити розширюваність при збереженні контролю над загальним потоком виконання. Наприклад, у веб-фреймворках цей патерн часто використовується для обробки HTTP-запитів, де загальна структура обробки залишається незмінною, але конкретна логіка може варіюватися.
Головні переваги використання патерну включають усунення дублювання коду, оскільки загальна логіка винесена в базовий клас, контрольовану розширюваність через чітко визначені точки варіацій, а також дотримання принципу відкритості/закритості з об'єктно-орієнтованого програмування. Водночас патерн має і деякі недоліки, такі як потенційне порушення принципу підстановки Лісков, якщо підкласи змінюють очікувану поведінку, та складність налагодження через розподіл логіки між батьківським та дочірніми класами.
У практичному застосуванні патерн Template Method особливо ефективний у сценаріях, де є чітко визначений алгоритм з варіативними кроками. Це може бути обробка даних з різних джерел, генерація звітів у різних форматах, або реалізація різних стратегій валідації при збереженні загальної структури процесу валідації.
Сучасні мови програмування надають різні можливості для реалізації цього патерну. В об'єктно-орієнтованих мовах як Java або C# використовується класичний підхід з абстрактними класами та віртуальними методами. Функціональні мови пропонують альтернативні підходи через функції вищого порядку, а мови з підтримкою міксинів або трейтів дозволяють більш гнучку композицію поведінки.


4 ВИСНОВКИ
У процесі дослідження патерну Template Method було встановлено, що він є потужним інструментом для організації коду в ситуаціях, коли потрібно забезпечити контрольовану варіативність алгоритму. Патерн ефективно вирішує проблему дублювання коду при наявності схожих алгоритмів з варіативними кроками.
Основна цінність патерну полягає в його здатності забезпечити баланс між гнучкістю та контролем. Розробники можуть розширювати функціональність через підкласи, не порушуючи загальної структури алгоритму, що особливо важливо в контексті розробки бібліотек та фреймворків.
Важливо відзначити, що ефективне використання патерну Template Method вимагає ретельного планування архітектури. Необхідно чітко визначити, які частини алгоритму є інваріантними, а які можуть варіюватися, щоб забезпечити оптимальний розподіл відповідальностей між базовим класом та підкласами.
Патерн демонструє класичні принципи об'єктно-орієнтованого програмування, такі як інкапсуляція загальної логіки та поліморфізм для варіативних частин. З розвитком функціонального програмування з'явилися альтернативні способи реалізації схожої функціональності, проте Template Method залишається актуальним та широко використовуваним підходом у сучасній розробці програмного забезпечення.



ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді
 
Відеозапис доповіді на YouTube:
https://youtu.be/RGq0EBbh4Zk

00:00 Що таке патерн Template Method? Основна ідея полягає у винесенні інваріантної частини алгоритму в батьківський клас та наданні підкласам можливості реалізувати варіативні кроки відповідно до їхніх специфічних потреб, забезпечуючи контрольовану розширюваність при збереженні цілісності загального процесу.




ДОДАТОК Б
Слайди презентації доповіді



Рисунок Б.1 – Титульний слайд  

Рисунок Б.2 - Визначення та призначення



Рисунок Б.3 - Практичний приклад


Рисунок Б.4 - Структура паттерну
Рисунок Б.5 - Конкретні реалізації

Рисунок Б.6 - Використання

Рисунок Б.6 - Переваги та недоліки


Рисунок Б.7 - Коли використовувати

Рисунок Б.7 - Порівняння з іншими патернами

Рисунок Б.7 - Висновки


ДОДАТОК В
Приклади програмного коду

 1 abstract class DataProcessor {
 2   // Шаблонний метод - визначає структуру алгоритму
 3   public final void processData() {
 4     readData();
 5     validateData();
 6     transformData();
 7     saveData();
 8     cleanup();
 9   }
10 
11   // Абстрактні методи - мають бути реалізовані в підкласах
12   protected abstract void readData();
13   protected abstract void validateData();
14   protected abstract void transformData();
15 }


 1 class CSVProcessor extends DataProcessor {
 2   @Override
 3   protected void readData() {
 4     System.out.println("Reading data from CSV file...");
 5   }
 6 
 7   @Override
 8   protected void validateData() {
 9     System.out.println("Validating CSV data format...");
10   }
11 
12   @Override
13   protected void transformData() {
14     System.out.println("Converting CSV to internal format...");
15   }
 1 from abc import ABC, abstractmethod
 2 
 3 class ReportGenerator(ABC):
 4   def generate_report(self):
 5     """Шаблонний метод"""
 6     self.collect_data()
 7     self.format_header()
 8     self.format_body()
 9     self.format_footer()
10     self.output_report()
11 
12   @abstractmethod
13   def collect_data(self):
14     pass
15
