МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 

ЗВІТ
з лабораторної роботи №5
з дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ» 
 



 
Виконав:                                       	    	   Перевірив:
ст. гр. ПЗПІ-22-9                                    	   викладач.каф.ПІ
Філатов Артем Дмитрович                    	   Дашенков Дмитро Сергійович 
 
 
  
Харків 2025
5.1 Мета завдання:

Розробити нативний мобільний застосунок для платформи Android, який буде частиною розробленої раніше системи контролю параметрів у офісних приміщеннях. Застосунок повинен інтегруватися з існуючим REST API, забезпечувати автентифікацію користувачів та надавати основний функціонал для перегляду даних з сенсорів.

5.2 Хід роботи:

Спроектовано архітектуру: Обрано архітектуру MVVM, яка чітко розділяє логіку представлення (View/Activity), логіку керування станом (ViewModel) та моделі даних. Створено відповідну структуру пакетів (api, auth, model, ui).
Реалізовано мережевий шар: За допомогою Retrofit створено інтерфейс ApiService для опису API-ендпоінтів (/auth/login, /sensors, /measurements тощо). Налаштовано RetrofitClient для створення єдиного екземпляру Retrofit з OkHttp-клієнтом, що додає JWT-токен до заголовків запитів.
Розроблено екран автентифікації: Створено LoginActivity з полями для email/пароля. LoginViewModel обробляє логіку запиту на сервер, а AuthManager зберігає отриманий токен в SharedPreferences для подальших сесій.
Створено головний екран (дашборд): Розроблено DashboardActivity, яка після успішної автентифікації завантажує та відображає список сенсорів та їхні останні показники у вигляді карток за допомогою RecyclerView та DashboardAdapter.
Налаштовано локалізацію: Створено файли strings.xml у директоріях res/values (для англійської мови) та res/values-uk (для української) для підтримки двомовного інтерфейсу.







5.3. UML діаграма прецедентів (Use Case Diagram)


Рисунок Б.1 - UML-діаграма прецедентів


5.4. UML діаграмa компонентів (Component Diagram).
Ця діаграма відображає логічну структуру системи на рівні модулів: інтерфейс користувача, інтерфейс адміністратора, модуль локалізації, взаємодію з бекендом через API, а також підключення до бази даних. Вона дозволяє зрозуміти, як саме побудована система і які частини її відповідальні за окремі функції.


Рисунок Б.2 - UML-діаграма компонентів


5.5. UML Activity Diagram — Діаграма діяльності



Рисунок Б.3 - UML Activity Diagram



5.6. UML State Diagram — Діаграма станів


			Рисунок Б.4 - UML-діаграма (State Diagram)


Код був завантажений на GitHub за посиланням:
https://github.com/NureFilatovArtem/apz-pzpi-22-9-filatov-artem/tree/main/Lab5
Відео демонстрація завантажена за посиланням:
https://youtu.be/YmFhUXT8jbs

5.7. Висновок:
В ході виконання лабораторної роботи було успішно розроблено та реалізовано нативний мобільний застосунок для платформи Android на мові програмування Kotlin. Архітектура додатку побудована на основі сучасного патерну MVVM, що дозволило чітко розділити відповідальність між шаром представлення, логікою та даними, забезпечивши високу якість коду та його легку підтримку.
Ключовим результатом роботи є повноцінна інтеграція мобільного клієнта з раніше розробленою backend-системою через REST API. Було реалізовано захищений механізм JWT-автентифікації, що дозволяє користувачам безпечно входити до системи та отримувати доступ до персоналізованих даних. Для роботи з мережею використано стек технологій Retrofit та OkHttp, що забезпечило надійну та ефективну комунікацію з сервером.
Функціонал додатку сфокусовано на головних потребах звичайного користувача: зручний перегляд даних з IoT-сенсорів на екрані дашборду. Також було закладено основу для подальшого розширення, включаючи інтернаціоналізацію з підтримкою української та англійської мов.
Таким чином, всі цілі, поставлені в лабораторній роботі, були успішно досягнуті. Створений мобільний застосунок є функціональною та логічно завершеною частиною загальної програмної системи.

5.8 Контрольні завдання
1. Опишіть програмну архітектуру мобільного застосунку.
Архітектура побудована за сучасним патерном MVVM (Model-View-ViewModel).
View (Activity/Fragment) відповідає виключно за відображення UI та передачу дій користувача у ViewModel.
ViewModel містить бізнес-логіку UI, керує станом екрану, взаємодіє з джерелами даних (API) і переживає зміни конфігурації (наприклад, поворот екрану).
Model представляє дані системи (як з локальних джерел, так і з API) та логіку роботи з ними. У нашому випадку, це моделі даних та Retrofit-сервіс.
2. Опишіть програмні технології та компоненти.
Kotlin як основна мова; Android SDK; XML для верстки; бібліотека Material Design Components для UI; Retrofit2 та OkHttp3 для роботи з мережею; Gson для серіалізації/десеріалізації JSON; Kotlin Coroutines для асинхронних операцій; RecyclerView для відображення списків; SharedPreferences для зберігання токена.
3. Опишіть доступну бізнес логіку.
Логін користувача: валідація введених даних та відправка запиту на сервер.
Управління сесією: збереження, отримання та видалення JWT-токена.
Отримання даних: завантаження списку сенсорів та їх показників з захищеного API.
Оновлення даних: реалізація механізму "Pull-to-refresh" для оновлення інформації на екрані.
4. Опишіть захист даних.
Захист реалізовано на рівні API. Додаток зберігає JWT-токен у приватній області SharedPreferences. OkHttp Interceptor автоматично перехоплює кожен вихідний запит та додає до нього заголовок Authorization: Bearer <token>, забезпечуючи доступ до захищених ресурсів бекенду. Прямого доступу до бази даних у мобільного застосунку немає.
5. Опишіть взаємодію з іншими компонентами системи.
Мобільний застосунок взаємодіє виключно з Backend API через REST-інтерфейс по протоколу HTTP/S. Він відправляє запити на ті ж самі ендпоінти, що і веб-частина, для отримання та маніпуляції даними. Вся бізнес-логіка, пов'язана з обробкою даних, знаходиться на сервері.
6. Опишіть підтримку інтерналізації.
Підтримка реалізована стандартними засобами Android. Усі текстові рядки виносяться в ресурсні файли strings.xml. Система автоматично обирає правильний файл на основі мови, встановленої в налаштуваннях мобільного пристрою.
7. Опишіть реалізовані варіанти локалізації.
Створено два варіанти локалізації: англійська (файл у res/values/) та українська (файл у res/values-uk/).
8. Опишіть функціональність для налаштування та адміністрування.
У мобільній версії реалізовано функціонал тільки для звичайного користувача — перегляд даних. Адміністративні функції (управління користувачами, CRUD операції над сутностями) доступні лише у веб-версії, оскільки це відповідає типовому розподілу завдань між мобільним та десктопним інтерфейсами.


